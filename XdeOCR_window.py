# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'XdeOCR.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QFrame
from PyQt5.QtCore import Qt, QEvent, QBuffer
from PyQt5.QtGui import QDragEnterEvent, QDropEvent, QPixmap, QIcon, QKeySequence, QImage
import numpy as np
from PIL import ImageGrab

class DragDropLabel(QLabel):
    def __init__(self, parent, text_edit):
        super().__init__(parent)
        self.setAcceptDrops(True)
        self.text_edit = text_edit
    
    def init_model(self,model):
        self.model = model

    def dragEnterEvent(self, event: QDragEnterEvent):
        if event.mimeData().hasUrls():
            event.acceptProposedAction()

    def pixmap_to_binary(self, pixmap):
        image = pixmap.toImage()
        width = image.width()
        height = image.height()
        bits = image.bits().asstring(width * height * image.depth() // 8)

        img_array = np.frombuffer(bits, dtype=np.uint8).reshape((height, width, 4))  # RGBA 格式

        return img_array


    def process(self, pix):
        self.setPixmap(pix)
        data = self.pixmap_to_binary(pix)
        result, elapsed_time = self.model(data)
        self.text_edit.setPlainText(result)

    def dropEvent(self, event: QDropEvent):
        for url in event.mimeData().urls():
            file_path = url.toLocalFile()
            print(f'File dropped: {file_path}')
            if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
                pix = QPixmap(file_path).scaled(self.contentsRect().size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)                
                self.process(pix)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(732, 282)
        MainWindow.setWindowIcon(QIcon('logo.ico'))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 200, 691, 41))
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("textEdit")

        self.label = DragDropLabel(self.centralwidget, self.textEdit)
        self.label.setGeometry(20, 20, 691, 161)
        self.label.setStyleSheet('border: 2px dashed black;')
        self.label.setStyleSheet("QLabel {\n"
        "    border: 2px dashed black;\n"
        "}")
        self.label.setFrameShape(QFrame.Box)
        self.label.setMidLineWidth(1)
        self.label.setObjectName("label")

        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 732, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # add clipboard
        # capture the keyboard
        MainWindow.installEventFilter(self)


    def load_image_from_clipboard(self):
        clipboard = QApplication.clipboard()
        pixmap = clipboard.pixmap()
        if not pixmap.isNull():
            pixmap = pixmap.scaled(self.label.contentsRect().size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.label.process(pixmap)
            return pixmap
        
        return None
    
    def take_screenshot(self):
        screenshot = ImageGrab.grab()
        screenshot_np = np.array(screenshot)
        height, width, channel = screenshot_np.shape
        bytes_per_line = 3 * width
        screenshot_qimage = QImage(screenshot_np.data, width, height, bytes_per_line, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(screenshot_qimage)
        self.label.setPixmap(pixmap)


    def eventFilter(self, source, event):
        if event.type() == QEvent.KeyPress:
            if event.matches(QKeySequence.Paste):
                pix = self.load_image_from_clipboard()
                if pix:
                   return True
        
        
        # return super(Ui_MainWindow, self).eventFilter(source, event)
        return False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "XdeOCR-Latex"))
